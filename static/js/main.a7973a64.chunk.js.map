{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","name","email","username","className","src","alt","CardList","robots","map","user","i","key","SearchBox","serachChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","console","log","Object","assign","store","createStore","applyMiddleware","thunkMiddeware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7973a64.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email, username}) => {\r\n\treturn (\r\n\t\t// <h1>RoboFriends</h1>\r\n\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${username}?size=200x200`} alt=\"robots\"/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// if (true) { // Assume go to false state\r\n\t// \tthrow new Error('NOOOOOOO!');\r\n\t// }\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={user.id} \r\n\t\t\t\t\t\tid={user.id} \r\n\t\t\t\t\t\tname={user.name} \r\n\t\t\t\t\t\temail={user.email} \r\n\t\t\t\t\t\tusername={user.username}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ serachChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={ serachChange }\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\t// console.log(props);\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid white', height: '380px' }}>\r\n\t\t\t{ props.children }\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../action.js'\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t\t// onRequestRobots: () => requestRobots(dispatch)\r\n\t}\r\n\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\t// onSearchChange = (event) => {\r\n\t// \tthis.setState({ searchField: event.target.value });\r\n\t// }\r\n\r\n\trender () {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filterRobots = robots.filter(robot => { // There robot is Object\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t});\r\n\t\treturn (isPending) ?\r\n\t\t\t<h1 className='f3 tc'>Loading</h1> :\r\n\t\t\t (\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox serachChange={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text,\r\n})\r\n\r\n// export const requestRobots = (dispatch) => {\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: '',\r\n}\r\n// searchRobots == Reducer\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\tconsole.log('reducer->',Object.assign({}, state, { searchField: action.payload }))\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload }) // return {...state, searchField: action.payload }\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\trobots: [],\r\n\terror: '',\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddeware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducer';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddeware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}